import classNames from 'classnames';
import React, { FunctionComponent, useEffect, useRef, useState } from 'react';
import { getNowMs } from '../utils/time';

import style from './penalty-delay.module.scss';

type PenaltyDelayProps = {
    content: string | undefined;
    timeEnd: number | undefined;
    onDone: () => void;
};

const PenaltyDelay: FunctionComponent<PenaltyDelayProps> = (props) => {
    const { content, timeEnd, onDone } = props;

    return (
        <div className={style.container}>
            <div className={style.content}>
                <div className={style.contentText}>{content}</div>
                <div className={style.countdownTimer} key={timeEnd}>
                    <ProgressEmblem timeEnd={timeEnd} onDone={onDone} />
                </div>
            </div>
        </div>
    );
};

type ProgressEmblemProps = {
    timeEnd: number;
    onDone: () => void;
};

const PRE_FILL_DELAY = 1200;
const POST_FILL_DELAY = -500;

const ProgressEmblem: FunctionComponent<ProgressEmblemProps> = (props) => {
    const { timeEnd, onDone } = props;

    const duration = timeEnd - getNowMs();

    const fillingDuration = duration - PRE_FILL_DELAY - POST_FILL_DELAY;
    const [isFilling, setIsFilling] = useState(false);
    const [isFilled, setIsFilled] = useState(false);

    const isRenderedRef = useRef(false);
    useEffect(() => {
        if (isRenderedRef.current) {
            return;
        }
        isRenderedRef.current = true;

        setTimeout(() => {
            requestAnimationFrame(() => {
                setIsFilling(true);
            });
        }, PRE_FILL_DELAY);

        setTimeout(() => {
            setIsFilled(true);
        }, Math.max(0, fillingDuration));

        setTimeout(() => {
            onDone();
        }, duration);
    }, []);

    return (
        <svg
            className={classNames(
                style.countdownTimerEmblem,
                isFilled && style.filled
            )}
            viewBox="0 0 811.48 167.15">
            <mask id="fill-mask">
                <rect x="0" y="0" width="100%" height="100%" fill="black" />
                <path
                    fill="#fff"
                    d="M785.37,68.91l-1.16-.66-.16,1.33c-.18,1.49-1.38,8.66-8.13,9.36-29.75,0-50.43-.13-96.83-.21l-101.56-.17a4.66,4.66,0,0,0,.32-1.77c0-3.55-5.71-7.38-14.93-7.38-7.87,0-14.65,3.84-21.23,9.09l-25.71,0c-1.62-9.69-12.4-16-22.52-16-12.15,0-18.63,8.87-18.63,15.28a10.85,10.85,0,0,0,10.58,10.83c3.57,0,7.17-2.59,7.5-8.35l21.49,0c0,.26,0,.51,0,.77,0,7.35-5.67,22.69-22,25.31,2.19-1.74,4-4.33,4-7a4.78,4.78,0,0,0-4.93-4.84c-3.51,0-4.95,2.1-6.33,4.13-1.87,2.73-4,5.81-11.82,5.81-8.39,0-18.52-8.56-18.52-19.19,0-3.6,1.31-6,4.53-8.43l1.82-1.35-2.26-.24a7.47,7.47,0,0,0-5.72,2.11,12.54,12.54,0,0,0-2.76,3.76c-2-12.24-11.18-23.22-26.86-23.22-13,0-20.72,8.18-22.42,16.93a12,12,0,0,0-7.37-2.66h-.33v.58c3,.39,5.39,2.18,7.48,4.17,0,.52-.15,1-.15,1.57a18.71,18.71,0,0,0,3.76,11.23c-1.21,5.32-5.61,13.51-14.77,19.07a34.21,34.21,0,0,1-6.24-6.87c-4.51-6.5-7.43-14.79-7.48-21.17a37.71,37.71,0,0,1,3-13.6c7.44-15.86,27.46-23.37,42-23.37,18.44,0,35.71,11.51,35.71,16.74a2.81,2.81,0,0,1-1.4,2.56,4.34,4.34,0,0,0-2,3.7,3.64,3.64,0,0,0,3.8,3.73c2.57,0,3.7-1.9,4.53-3.29.59-1,1-1.57,1.45-1.57a4.42,4.42,0,0,1,1.29.3,9.5,9.5,0,0,0,3.32.62c2.84,0,5.12-2.4,5.12-4.39,0-2.78-2.44-4.24-4.86-4.24a6.78,6.78,0,0,0-3.25,1,3.8,3.8,0,0,1-1.49.56h0a1.52,1.52,0,0,1-1.21-.76c-.64-.94-3.83-4.16-9.18-7.53l0,0a38.42,38.42,0,0,1-9.08-8.77l-.41-.61-.68.29a19.46,19.46,0,0,1-8.89,1.31h0A59.63,59.63,0,0,0,420.94,42c-16.35,0-26.94,5.94-33.32,11.52C396,45,407.21,40.08,416.27,40.08a11.38,11.38,0,0,1,1.2.1c.47,0,.92.1,1.25.1,1.07,0,3.58-.57,3.58-5.82,0-4.77-3.36-8.81-7.33-8.81-2.31,0-7.81,3.43-14.05,9C408,26.36,413.61,19,413.61,11.06,413.61,2.9,410.17,0,407.23,0a4.15,4.15,0,0,0-3.93,4.43,5.22,5.22,0,0,0,1.22,3.09,4.13,4.13,0,0,1,1,2.53c0,.85-1.2,1.54-2.36,2.2-1.37.78-2.79,1.59-2.79,3.05a6,6,0,0,1-2.21,4.62c-1,1-2,2-2,3.67a3.22,3.22,0,0,0,1.57,3.05,1.57,1.57,0,0,1,.82,1.62c0,1-2.51,4.38-5.18,7.92-2.35,3.11-5.23,6.93-8,11.14-1.46-1.73-4.15-3.84-6.36-3.84s-3.63,1.24-3.63,3.09a4.76,4.76,0,0,0,1.74,3.53c1.21,1.27,2.59,2.71,2.59,7.22a2.62,2.62,0,0,1-.23,1.2,50.67,50.67,0,0,0-5.14,18.53,29.5,29.5,0,0,0-.22,3.5v.19h0v0h0v0h0c.06,10.92,4,21.84,12.35,29.23a43.36,43.36,0,0,1-11.06,1.47c-13.26,0-17.59-7.31-17.59-9.83a4.92,4.92,0,0,1,.91-2.31,4.65,4.65,0,0,0-4.18-7.45c-2,0-5.81,1.36-5.81,6.51,0,8.45,11.17,15.59,24.5,15.78a54.47,54.47,0,0,1-6.85.47c-1.61,0-3.13-.09-4.63-.21-1.25-.11-2.48-.25-3.68-.44l-.31,0a51.08,51.08,0,0,1-7.62-1.85l-.66-.23c-.7-.24-1.38-.49-2.05-.75-15.13-6.38-20.69-19.8-20.69-26.91,0-.32,0-.64,0-1h5.17c12,0,22.81-.66,22.81-8.62,0-5.56-5.41-9.91-12.31-9.91-6.4,0-15.81,6.58-17.27,16.76H309.57c-5.81-5.51-11.19-9.58-16.79-9.58-9.22,0-14.92,3.83-14.92,7.38a4.1,4.1,0,0,0,.62,2.2H36.63c-7.69,0-9-7.84-9.19-9.41l-.16-1.32-1.16.66c-4.54,2.59-14,8-26.12,10.09l.15,1.75H308.86c1.67,1.6,3.37,3.31,5.13,5.08C323.6,98,335,109.46,351,114.19c.71.22,1.43.43,2.18.62.39.1.79.18,1.19.27,1,.23,2,.45,3.09.62.45.08.91.12,1.35.18,1,.13,1.95.28,3,.36,1.53.12,3.1.2,4.7.2a46.64,46.64,0,0,0,21.86-4.93c1.83,1.66,1.83,5.91.69,7.83l-.28.47.3.46c.71,1.1,2.74,2.12,5,2.12a6.79,6.79,0,0,0,.9,0,7.29,7.29,0,0,0,5.84-4.79,46.33,46.33,0,0,0,12.23,1.59c.4,0,.78,0,1.17,0v0a26.75,26.75,0,0,0,2.85-.18c11.46-.9,20.14-5.68,25.83-12.17-.14.26-.26.53-.41.79-8.24,12.29-22.67,19.48-33.72,19.48a11.16,11.16,0,0,1-1.2-.09c-.47,0-.92-.1-1.25-.1-1.07,0-3.58.57-3.58,5.82,0,4.77,3.36,8.8,7.33,8.8,2.31,0,7.82-3.43,14.06-9-7.07,8.24-12.7,15.64-12.7,23.54,0,8.17,3.44,11.07,6.38,11.07a4.15,4.15,0,0,0,3.93-4.43,5.19,5.19,0,0,0-1.22-3.09,4.13,4.13,0,0,1-1-2.53c0-.84,1.21-1.52,2.37-2.18,1.4-.79,2.85-1.61,2.78-3.12-.12-2.24,1-3.36,2.15-4.54,1-1,2-2,2-3.7a3.25,3.25,0,0,0-1.57-3.06,1.55,1.55,0,0,1-.82-1.61c0-1,2.51-4.38,5.18-7.92,2.35-3.11,5.23-6.93,8-11.15,1.46,1.74,4.15,3.85,6.36,3.85s3.63-1.24,3.63-3.09a4.76,4.76,0,0,0-1.74-3.53c-1.21-1.27-2.59-2.71-2.59-7.22a2.69,2.69,0,0,1,.23-1.21,50.88,50.88,0,0,0,4.8-15.36c3.19,9.51,13.15,19.62,33.44,19.62,22.73,0,36.95-13.06,49.5-24.57,3.13-2.87,6.12-5.61,9.09-8l29.31,0a5.68,5.68,0,0,0,4.25,0l103.24.17c45.84.08,66,.15,95.76.2v.06c.4,0,.78,0,1.15-.05l35.33.05.15-1.76C799.36,76.9,789.91,71.5,785.37,68.91ZM492.05,78.43h-.88v.89c0,5.51-3.11,7.46-5.76,7.46a9.06,9.06,0,0,1-8.81-9.06c0-5.66,5.86-13.51,16.86-13.51,9.25,0,19.09,5.62,20.73,14.25ZM342.57,66.51c5.81,0,10.54,3.65,10.54,8.14,0,5.71-8.05,6.85-21,6.85h-5C328.51,72.39,336.87,66.51,342.57,66.51Zm-56.9,15a6.7,6.7,0,0,0,.91-1.64c.64-1.68,2.34-6.17,6.2-6.17,4.56,0,9.19,3.25,14.18,7.81Zm29.58,5.61c-1.31-1.32-2.59-2.6-3.86-3.84h13.74c0,.32,0,.64,0,1,0,5.93,2.77,13.14,8.44,19.24C326.55,98.47,320.61,92.5,315.25,87.11Zm87.29-8.29a14.17,14.17,0,0,1,2.34,8c0,.07,0,.16,0,.23A17.22,17.22,0,0,1,402.54,78.82Zm46.51,7.58a30.08,30.08,0,0,1-.35,3.87,31.64,31.64,0,0,1-19.82,24.26c8.89-6.21,14-17.72,14-28.64,0-9.59-6.58-19.78-18.76-19.78-6.44,0-10.78,4.22-10.78,8.17a3.34,3.34,0,0,0,3.47,3.34,6.5,6.5,0,0,0,3.62-1.41,7.75,7.75,0,0,1,4.67-1.66c.12,0,11.18.15,11.18,12.94,0,11.05-6.16,19.13-8.78,19.13-.7,0-1.58-1-2.41-2-1.14-1.3-2.42-2.77-4.13-2.77s-2.72,1.62-4.12,3.68c-2.44,3.57-5.78,8.48-13.54,8.48a20.68,20.68,0,0,1-12.09-4.18,34.54,34.54,0,0,0,14.67-18.66,11.21,11.21,0,0,0,7.89,3.3c5,0,8.07-2.46,8.07-6.44a4.25,4.25,0,0,0-8.5,0,4.21,4.21,0,0,0,3.59,4.12,9.21,9.21,0,0,1-3.16.55,9.76,9.76,0,0,1-7.39-3.59,13.46,13.46,0,0,0,.26-2.34,15.38,15.38,0,0,0-4-10.59c1-7.37,6.86-16.62,20.85-16.62,16.76,0,25.53,13.45,25.53,26.75Zm83,.6c-12.31,11.3-26.27,24.11-48.31,24.11-24.12,0-32.88-14.81-32.88-24.76a11.05,11.05,0,0,1,3.5-7.74,7.81,7.81,0,0,1,1.47-1A10.93,10.93,0,0,0,453,85.2c0,11.81,10.91,21,20.29,21,8.78,0,11.27-3.66,13.28-6.59,1.33-2,2.3-3.36,4.87-3.36a3,3,0,0,1,3.16,3.07c0,3.9-4.9,7.41-7.22,7.41v1.77A28.25,28.25,0,0,0,516.19,81c0-.26,0-.51,0-.77l23.37,0C537,82.39,534.54,84.68,532,87Zm12.53-8.49c5.8-4.39,11.65-7.33,18.38-7.33,3.87,0,5.57,4.49,6.24,6.27a7.36,7.36,0,0,0,.51,1.1Z"
                />
            </mask>
            <g mask="url(#fill-mask)">
                <rect
                    x="0"
                    y="0"
                    width="100%"
                    height="100%"
                    className={style.countdownTimerEmblemBase}
                />
                <rect
                    x="0"
                    y="0"
                    width="100%"
                    height="100%"
                    className={style.countdownTimerEmblemFill}
                    style={{
                        transform: isFilling ? 'none' : 'scaleX(0%)',
                        transitionDuration: `${Math.max(0, fillingDuration)}ms`,
                    }}
                />
                <rect
                    x="0"
                    y="0"
                    width="100%"
                    height="100%"
                    className={classNames(
                        style.countdownTimerEmblemReady,
                        isFilled || style.hidden
                    )}
                    id="loaderTextReady"
                />
            </g>
        </svg>
    );
};

function calcLoaderHeight(p: number) {
    const imgHeight = 811;
    const marginTop = 122;
    const marginBottom = 63 + 40; // +40 so the initial line cuts through the text

    if (p >= 1) {
        return 1;
    } else if (p <= 0) {
        return marginBottom / imgHeight;
    } else {
        return (
            (marginBottom + p * (imgHeight - marginBottom - marginTop)) /
            imgHeight
        );
    }
}

export default PenaltyDelay;
